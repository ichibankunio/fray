//go:build ignore
// +build ignore

package main

// var ScreenSize vec2
// var Pos vec2
// var Dir vec2
// var Plane vec2
var PosDirPlane [3]vec2
// var WorldSize vec2
// var texSize float
// var Level [100]float
// var FloorLevel [100]float
var PosZ float
var Pitch float
var SpriteParam [18]float


func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
    // return vec4(1, 0, 0, 1)

    texSize := 64.0//64 = 2^6
    screenSize := vec2(640, 480)

    level := [100]float{
        1, 1, 2, 2, 2, 2, 1, 1, 1, 1,
        1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
        1, 1, 1, 2, 0, 0, 0, 0, 0, 1,
        1, 2, 1, 2, 0, 0, 0, 0, 1, 1,
        1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    }

    levelHeight := [100]float{
        1, 1, 2, 2, 2, 2, 1.5, 1, 1, 1,
        1, 0, 0, 0, 0, 0, 0.5, 0, 0, 1,
        1, 1, 1.5, 2, 0, 0, 0, 0, 0, 1,
        1, 2, 1, 2, 0, 0, 0, 0, 1, 1,
        1, 1, 0, 0, 0, 0, 0, 0, 0, 0.1,
        0.4, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    }

    floorLevel := [100]float{
        1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 1, 1, 1, 1, 0, 1, 1,
        1, 1, 0, 1, 1, 1, 1, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    }

    //calculate ray position and direction
    cameraX := 2.0 * (1.0 - position.x / screenSize.x) - 1.0 //x-coordinate in camera space


    rayDir := PosDirPlane[1] + PosDirPlane[2] * cameraX
    // rayDir := vec2(Dir.x + Plane.x * cameraX, Dir.y + Plane.y * cameraX)

    mapPos := floor(PosDirPlane[0] + 0.0)

    // sideDist := vec2(0)
    deltaDist := abs(1.0/rayDir)
    // deltaDist := vec2(abs(1/rayDir.x), abs(1/rayDir.y))
    perpWallDist := 0.0

    unit := sign(rayDir)
    // unit := vec2(0)
    side := -1.0

    sideDist := (unit * (mapPos - PosDirPlane[0]) + (unit * 0.5) + 0.5) * deltaDist

    mapIndex := 0.0

    //perform DDA
    for i := 0; i < 20; i++ {
        //jump to next map square, OR in x-direction, OR in y-direction
        if sideDist.x < sideDist.y {
            sideDist.x += deltaDist.x
            mapPos.x += unit.x
            side = 0.0
        } else {
            sideDist.y += deltaDist.y
            mapPos.y += unit.y
            side = 1.0
        }

        mapIndex = level[10*int(mapPos.y)+int(mapPos.x)]
        if mapIndex >= 1 {
            break
        }

        //Calculate distance of perpendicular ray (oblique distance will give fisheye effect!)
    }

    // wallX := 0.0
    perpWallDist = side * (sideDist.y - deltaDist.y) + (1.0 - side) * (sideDist.x - deltaDist.x)

    //sprite casting
    // squaredEuclidean := perpWallDist * perpWallDist * (rayDir.x * rayDir.x + rayDir.y * rayDir.y) // euclidean = perpWallDist * |rayDir|

    //SPRITE CASTING HERE(deleted)----------------------------------------------------------------

    wallX := fract(side * (PosDirPlane[0].x + perpWallDist*rayDir.x) + (1.0 - side) * (PosDirPlane[0].y + perpWallDist*rayDir.y))

    rayHeight := levelHeight[10*int(mapPos.y)+int(mapPos.x)]//ray's current height

    lineHeight := screenSize.y / perpWallDist * rayHeight
    eyeHeight := (PosZ) * screenSize.y / texSize / perpWallDist // PosZが0の時にちゃんと目線が地面に来るように32をひく　PosZが64の時にちゃんと目線が1ブロック分のところに来るように調整

    drawStart := -lineHeight + screenSize.y / 2.0 + eyeHeight + Pitch
    drawEnd := screenSize.y / 2.0 + eyeHeight + Pitch

    if position.y >= drawStart && position.y <= drawEnd {
        texPos := vec2((wallX + mod(mapIndex-1, screenSize.x / texSize)) * texSize, (position.y - drawStart) / lineHeight * texSize)
        texOrigin, _ := imageSrcRegionOnTexture()
        //s はテクスチャ上のimageSrc上の座標　単位テクセル
        //texOrigin + s/imageSrcTextureSize()はimageSrcがあるテクスチャのどの座標（単位ピクセル）のRGBAをとるか
        clr := imageSrc0At(texOrigin + texPos/imageSrcTextureSize()).rgb

        return side * vec4(clr-vec3(0.1), 1) + (1.0 - side) * vec4(clr, 1.0)

    }else if position.y > drawEnd {//floor casting


        rayHitPos := vec2(mapPos.x + side * wallX + (1.0 - side) * (0.5 - 0.5 * sign(rayDir.x)), mapPos.y + (1.0-side) * wallX + side*((0.5 - 0.5 * sign(rayDir.y))))


        distToIntersectionWithBottomOfWall := perpWallDist
        distPlayer := 0.0
        // distToIntersectionWithFloor := (screenSize.y)/(2.0*position.y - screenSize.y)//これを下に変えるとPosZとPitchを変えた時の床の描画がうまくいく　理由不明
        distToIntersectionWithFloor := (screenSize.y + (2.0 * (PosZ-32)*screenSize.y/texSize))/ (2.0*(position.y - Pitch) - screenSize.y) //この代わりに小さなルックアップ テーブルを作成できます
        // currentDist = (h + (2.0 * posZ)) / (2.0 * (y - pitch) - h);

        weight := (distToIntersectionWithFloor - distPlayer) / (distToIntersectionWithBottomOfWall - distPlayer)//0-1

        currentFloor := vec2(weight*rayHitPos.x+(1.0-weight)*PosDirPlane[0].x, weight*rayHitPos.y+(1.0-weight)*PosDirPlane[0].y) //平面図において線形補完
        floorMapIndex := floorLevel[10*int(currentFloor.y)+int(currentFloor.x)] - 1.0


        texPos := vec2((fract(currentFloor.x) + mod(floorMapIndex, screenSize.x / texSize)) * texSize, (fract(currentFloor.y)) * texSize) //テクスチャが多いときの折り返し未実装


        texOrigin, _ := imageSrcRegionOnTexture()
        //s はテクスチャ上のimageSrc上の座標　単位テクセル
        //texOrigin + s/imageSrcTextureSize()はimageSrcがあるテクスチャのどの座標（単位ピクセル）のRGBAをとるか
        return imageSrc1UnsafeAt(texOrigin + texPos/imageSrcTextureSize())
    }else if position.y < drawStart {//ceiling casting

        //perform DDA
        for i := 0; i < 20; i++ {
            //jump to next map square, OR in x-direction, OR in y-direction
            if sideDist.x < sideDist.y {
                sideDist.x += deltaDist.x
                mapPos.x += unit.x
                side = 0.0
            } else {
                sideDist.y += deltaDist.y
                mapPos.y += unit.y
                side = 1.0
            }

            mapIndex = level[10*int(mapPos.y)+int(mapPos.x)]
            if mapIndex >= 1 {
                break
            }

            //Calculate distance of perpendicular ray (oblique distance will give fisheye effect!)
        }

        perpWallDist = side * (sideDist.y - deltaDist.y) + (1.0 - side) * (sideDist.x - deltaDist.x)

        wallX := fract(side * (PosDirPlane[0].x + perpWallDist*rayDir.x) + (1.0 - side) * (PosDirPlane[0].y + perpWallDist*rayDir.y))

        rayHeight := levelHeight[10*int(mapPos.y)+int(mapPos.x)]//ray's current height

        lineHeight := screenSize.y / perpWallDist * rayHeight
        
        eyeHeight := (PosZ) * screenSize.y / texSize / perpWallDist // PosZが0の時にちゃんと目線が地面に来るように32をひく　PosZが64の時にちゃんと目線が1ブロック分のところに来るように調整

        drawStart := -lineHeight + screenSize.y / 2.0 + eyeHeight + Pitch
        drawEnd := screenSize.y / 2.0 + eyeHeight + Pitch

        if position.y >= drawStart && position.y <= drawEnd {
            texPos := vec2((wallX + mod(mapIndex-1, screenSize.x / texSize)) * texSize, (position.y - drawStart) / lineHeight * texSize)
            texOrigin, _ := imageSrcRegionOnTexture()
            //s はテクスチャ上のimageSrc上の座標　単位テクセル
            //texOrigin + s/imageSrcTextureSize()はimageSrcがあるテクスチャのどの座標（単位ピクセル）のRGBAをとるか
            clr := imageSrc0At(texOrigin + texPos/imageSrcTextureSize()).rgb

            return side * vec4(clr-vec3(0.1), 1) + (1.0 - side) * vec4(clr, 1.0)

        }

        // if levelHeight[10*int(mapPos.y)+int(mapPos.x)] == rayHeight {
            
        //     return vec4(1, 0, 0, 1)
        // }

        discard()


    }

    return vec4(0.0)
}



