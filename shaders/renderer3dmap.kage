// go:build ignore
// +build ignore

//kage:unit pixels
package main

var Pos vec2//camera positon(x, y) (one block = 1)
var PosZ float//Camera position z (PosZ = 1 means camera is at one block above the PosZ = 0)
var Dir vec2//camera dir
var Plane vec2//camera plane

var Pitch float

var SpriteParameterNum int

var TexSize float//single wall/floor/sprite size in px
var ScreenSize vec2
var WorldSize vec2

var AimPos vec3
var HandTextureID float
// var PlayerAnimationIndex float

//imageSrc0 = sprite texture
//imageSrc1 = floor/wall texture
//imageSrc1 and imageSrc2 should be unified (2023/3/31 done!)
//imageSrc2 = sprite ID, distance toward camera、xy coordinates of top-left position on screen, (width, height) on screen
//imageSrc3.g = height of walls 　imageSrc3.r = floor texture ID(side, not including top)

//imageSrc0: sprite texture & sprite ID, distance toward camera、xy coordinates of top-left position on screen, (width, height) on screen
//imageSrc1: floor/wall texture & height of walls
//imageSrc2: mapData layers
//imageSrc3: mapData layers


// func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
func Fragment(dstPos vec4, srcPos vec2, color vec4) vec4 {

    texOrigin := imageSrc0Origin()
    cameraX := 2.0 * (1.0 - dstPos.x / ScreenSize.x) - 1.0 //x-coordinate in camera space

    rayDir := Dir + Plane * cameraX

    mapPos := floor(Pos + 0.0)

    raycasterPos := Pos

    deltaDist := abs(1.0/rayDir)
    perpWallDist := 0.0

    unit := sign(rayDir)
    side := -1.0

    sideDist := (unit * (mapPos - Pos) + (unit * 0.5) + 0.5) * deltaDist


    lineHeight := 0.0
    wallHeightAtRayPosition := imageSrc1UnsafeAt(texOrigin + mapPos).a * 255//ray's initial height = ground height at camera's position
    spriteBlending := vec4(0)

    //DDA algorism
    for i := 0; i < 100; i++ {
        //jump to next map square, OR in x-direction, OR in y-direction
        if sideDist.x < sideDist.y {
            sideDist.x += deltaDist.x
            mapPos.x += unit.x
            side = 0.0
        } else {
            sideDist.y += deltaDist.y
            mapPos.y += unit.y
            side = 1.0
        }

        if mapPos.x < 0 || mapPos.y < 0 || mapPos.x > WorldSize.x-1 || mapPos.y > WorldSize.y-1 {
            break
        }

        proceedingRayHeight := imageSrc1UnsafeAt(texOrigin + mapPos).a * 255 + (1 - max(abs(sign(mapPos.x - AimPos.x)), abs(sign(mapPos.y - AimPos.y))))
        /* replaced
        proceedingRayPosition := imageSrc1UnsafeAt(texOrigin + mapPos).a * 255
        if mapPos == AimPos.xy {
            proceedingRayHeight ++
        }
        */

        // if imageSrc3UnsafeAt(texOrigin + mapPos).g * 255 != wallHeightAtRayPosition {//g: height map(1~255 uint8)
        if (proceedingRayHeight != wallHeightAtRayPosition || i == 99) || mapPos.x == 0 || mapPos.x == WorldSize.x-1 || mapPos.y == 0 || mapPos.y == WorldSize.y-1  {//g: height map(1~255 uint8)

            perpWallDist = side * (sideDist.y - deltaDist.y) + (1.0 - side) * (sideDist.x - deltaDist.x)

            //sprite casting
            squaredEuclidean := perpWallDist * perpWallDist * (rayDir.x * rayDir.x + rayDir.y * rayDir.y) // euclidean = perpWallDist * |rayDir|
                for i := 0; i < 6; i++ {
                    spriteParameterOrigin := vec2(0, ScreenSize.y-1.0)
                    spriteOrigin := spriteParameterOrigin + vec2(float(SpriteParameterNum * i), 0)
                    sizeOnScreen := vec2(DecodeFloatRGBA(imageSrc0UnsafeAt(texOrigin + spriteOrigin+vec2(2, 0))), DecodeFloatRGBA(imageSrc0UnsafeAt(texOrigin + spriteOrigin+vec2(3, 0)))) * ScreenSize * 100

                    distanceToCamera := DecodeFloatRGBA(imageSrc0UnsafeAt(texOrigin + spriteOrigin+vec2(4, 0))) * 200

                    signOfPos := vec2(DecodeFloatRGBA(imageSrc0UnsafeAt(texOrigin + spriteOrigin+vec2(5, 0))), DecodeFloatRGBA(imageSrc0UnsafeAt(texOrigin + spriteOrigin+vec2(6, 0))))

                    posOnScreen := (vec2(DecodeFloatRGBA(imageSrc0UnsafeAt(texOrigin + spriteOrigin)), DecodeFloatRGBA(imageSrc0UnsafeAt(texOrigin + spriteOrigin+vec2(1, 0)))) - signOfPos) * ScreenSize

                    TexIDBegin := DecodeFloatRGBA(imageSrc0UnsafeAt(texOrigin + spriteOrigin+vec2(7, 0))) * 255

                    CurrentAnimation := DecodeFloatRGBA(imageSrc0UnsafeAt(texOrigin + spriteOrigin+vec2(8, 0))) * 255

                    if distanceToCamera >= 0 && distanceToCamera < squaredEuclidean && dstPos.x > posOnScreen.x && dstPos.x < posOnScreen.x + sizeOnScreen.x && dstPos.y > posOnScreen.y && dstPos.y < posOnScreen.y + sizeOnScreen.y {

                        posOnTexture := vec2((dstPos.x - posOnScreen.x) / sizeOnScreen.x + mod(TexIDBegin + CurrentAnimation, ScreenSize.x / TexSize), (dstPos.y - posOnScreen.y) / sizeOnScreen.y + floor((TexIDBegin + CurrentAnimation) / (ScreenSize.x / TexSize))) * TexSize

                        clr := imageSrc0UnsafeAt(texOrigin + posOnTexture)

                        if clr.a > 0 {
                            if sizeOnScreen.x > ScreenSize.x*1.5 {//(WIP)
                                spriteBlending = vec4(clr.rgb, ScreenSize.x*1.5 / sizeOnScreen.x)
                            }else {
                                return vec4(clr)
                            }
                        }
                    }
                }
            
            
            wallX := fract(side * (Pos.x + perpWallDist*rayDir.x) + (1.0 - side) * (Pos.y + perpWallDist*rayDir.y))

            lastRenderedWallTop := ScreenSize.y / perpWallDist * wallHeightAtRayPosition

            wallHeightAtRayPosition = imageSrc1UnsafeAt(texOrigin + mapPos).a * 255
            //aim(additional block)---------
            // wallHeightAtRayPosition = imageSrc1UnsafeAt(texOrigin + mapPos).a * 255 + (1 - max(abs(sign(mapPos.x - AimPos.x)), abs(sign(mapPos.y - AimPos.y))))

            // (1 - dot(sign(mapPos - AimPos.xy), sign(mapPos -  AimPos.xy))/2)
            // if mapPos == AimPos.xy {
            //     wallHeightAtRayPosition ++
            // }
    
            lineHeight = ScreenSize.y / perpWallDist * wallHeightAtRayPosition

            eyeHeight := PosZ * ScreenSize.y / perpWallDist

            drawStart := -lineHeight + ScreenSize.y / 2.0 + eyeHeight + Pitch
            drawEnd := ScreenSize.y / 2.0 + eyeHeight + Pitch - lastRenderedWallTop

            if dstPos.y >= drawStart && dstPos.y <= drawEnd {//wall casting
                rayHeight := (drawEnd + lastRenderedWallTop - dstPos.y) / lineHeight * wallHeightAtRayPosition//下から何個目のブロックか
                rayHeightFloor := floor(rayHeight)
                // rayHeightFract := fract(rayHeight)

                texOffset := vec2(mod(floor(rayHeightFloor/4), ScreenSize.x / WorldSize.x), floor(floor(rayHeightFloor/4)/(ScreenSize.x / WorldSize.x)))*WorldSize.x
 
                wallTextureIDFragment := imageSrc2UnsafeAt(texOrigin + texOffset + mapPos) * 255
                rayHeightMod4 := mod(rayHeightFloor, 4)
                wallTextureID := (1-step(0.1, rayHeightMod4)) * wallTextureIDFragment.r + step(1, rayHeightMod4) * (1-step(1.1, rayHeightMod4)) * wallTextureIDFragment.g + step(2, rayHeightMod4) * (1-step(2.1, rayHeightMod4)) * wallTextureIDFragment.b + step(3, rayHeightMod4) * (1-step(3.1, rayHeightMod4)) * wallTextureIDFragment.a
                /* replaced
                var wallTextureID float
                if mod(rayHeightFloor, 4) == 0 {
                    wallTextureID = imageSrc2UnsafeAt(texOrigin + texOffset + mapPos).r * 255//getting wall texture id to draw(int value [0,255])
                }else if mod(rayHeightFloor, 4) == 1 {
                    wallTextureID = imageSrc2UnsafeAt(texOrigin + texOffset + mapPos).g * 255//getting wall texture id to draw(int value [0,255])
                }else if mod(rayHeightFloor, 4) == 2 {
                    wallTextureID = imageSrc2UnsafeAt(texOrigin + texOffset + mapPos).b * 255//getting wall texture id to draw(int value [0,255])
                }else if mod(rayHeightFloor, 4) == 3 {
                    wallTextureID = imageSrc2UnsafeAt(texOrigin + texOffset + mapPos).a * 255//getting wall texture id to draw(int value [0,255])
                }
                */
                
                wallY := fract((dstPos.y - drawStart) / lineHeight * wallHeightAtRayPosition)

                //aim(additional block)
                // if rayHeightFloor == AimPos.z && mapPos == AimPos.xy {
                //     wallTextureID = HandTextureID
                // }

                //aim(block with mark)
                // if rayHeightFloor == AimPos.z-1 && mapPos == AimPos.xy && (wallX < 0.03125 || wallX > 0.96875 || wallY < 0.03125 || wallY > 0.96875) {
                if rayHeightFloor == AimPos.z-1 && mapPos == AimPos.xy && (wallX < 0.03125 || wallX > 0.96875 || wallY < 0.03125 || wallY > 0.96875) {
                // if rayHeightFloor == AimPos.z-1 && mapPos == AimPos.xy && (wallX < 0.03125 || wallX > 0.96875 || wallY < 0.03125 || wallY > 0.96875) && rayHeightFract < 0.01 {
                    discard()
                }
                posOnTexture := vec2(wallX + mod(wallTextureID, ScreenSize.x / TexSize), wallY + floor(wallTextureID/(ScreenSize.x / TexSize)))*TexSize
                
                clr := imageSrc1UnsafeAt(texOrigin + posOnTexture)

                clr = (side * vec4(clr.rgb-vec3(0.1), 1) + (1.0 - side) * vec4(clr.rgb, 1.0)) //影を簡易的につける
 

                return vec4(clr.rgb + (spriteBlending.rgb - clr.rgb) * spriteBlending.a, 1)

            }else if dstPos.y > drawEnd {//floor casting

                rayHitPos := vec2(mapPos.x + side * wallX + (1.0 - side) * (0.5 - 0.5 * sign(rayDir.x)), mapPos.y + (1.0-side) * wallX + side*((0.5 - 0.5 * sign(rayDir.y))))

                distanceBottomOfWallFromCamera := perpWallDist
                
                // raycasterPos/imageSrcTextureSize()).g*255 is ground height at current raycaster xy position
                offsetZ := ((PosZ-imageSrc1UnsafeAt(texOrigin + raycasterPos).a*255)-0.5)*ScreenSize.y
             
                distanceNearestFloorFromCamera := (ScreenSize.y + 2.0*offsetZ) / (2.0*(dstPos.y - Pitch) - ScreenSize.y)
    
                weight := distanceNearestFloorFromCamera / distanceBottomOfWallFromCamera//0-1

                currentFloor := vec2(weight*rayHitPos.x+(1.0-weight)*(Pos.x), weight*rayHitPos.y+(1.0-weight)*Pos.y) //linear interpolation

                wallHeightAtRayPosition := imageSrc1UnsafeAt(texOrigin + floor(currentFloor)).a * 255

                texOffset := vec2(mod(floor((wallHeightAtRayPosition-1)/4), ScreenSize.x / WorldSize.x), floor(floor((wallHeightAtRayPosition-1)/4)/(ScreenSize.x / WorldSize.x)))*WorldSize.x

                // if dstPos.y < ScreenSize.y/2 {
                //     return vec4(1, 0, 0, 1)
                // }

                if floor(currentFloor) == AimPos.xy && (fract(currentFloor.x) < 0.03125 || fract(currentFloor.y) < 0.03125 || fract(currentFloor.x) > 0.96875 || fract(currentFloor.y) > 0.96875) {
                // if mapPos == AimPos.xy && (fract(currentFloor.x) < 0.03125 || fract(currentFloor.y) < 0.03125 || fract(currentFloor.x) > 0.96875 || fract(currentFloor.y) > 0.96875) {
                    discard()
                }else if wallHeightAtRayPosition == 0 {
                    return vec4(0.4, 0.4, 0.4, 1) //床
                    // return vec4(1, 0, 0, 1)
                }

                floorTextureIDFragment := imageSrc2UnsafeAt(texOrigin + texOffset + floor(currentFloor)) * 255
                wallHeightMod4 := mod(wallHeightAtRayPosition-1, 4)
                floorTextureID := (1-step(0.1, wallHeightMod4)) * floorTextureIDFragment.r + step(1, wallHeightMod4) * (1-step(1.1, wallHeightMod4)) * floorTextureIDFragment.g + step(2, wallHeightMod4) * (1-step(2.1, wallHeightMod4)) * floorTextureIDFragment.b + step(3, wallHeightMod4) * (1-step(3.1, wallHeightMod4)) * floorTextureIDFragment.a
                /* replaced
                var floorTextureID float
                if mod(wallHeightAtRayPosition-1, 4) == 0 {
                    floorTextureID = imageSrc2UnsafeAt(texOrigin + texOffset + floor(currentFloor)).r * 255//getting wall texture id to draw(int value [0,255])
                }else if mod(wallHeightAtRayPosition-1, 4) == 1 {
                    floorTextureID = imageSrc2UnsafeAt(texOrigin + texOffset + floor(currentFloor)).g * 255//getting wall texture id to draw(int value [0,255])
                }else if mod(wallHeightAtRayPosition-1, 4) == 2 {
                    floorTextureID = imageSrc2UnsafeAt(texOrigin + texOffset + floor(currentFloor)).b * 255//getting wall texture id to draw(int value [0,255])
                }else if mod(wallHeightAtRayPosition-1, 4) == 3 {
                    floorTextureID = imageSrc2UnsafeAt(texOrigin + texOffset + floor(currentFloor)).a * 255//getting wall texture id to draw(int value [0,255])
                }
                */

                posOnTexture := vec2(fract(currentFloor.x) + mod(floorTextureID, ScreenSize.x / TexSize), fract(currentFloor.y) + floor(floorTextureID/(ScreenSize.x / TexSize)))*TexSize

                clr := imageSrc1UnsafeAt(texOrigin + posOnTexture)
                return vec4(clr.rgb + (spriteBlending.rgb - clr.rgb) * spriteBlending.a, 1)
            }else if dstPos.y < drawStart {//preparation for next floor(top of cube) casting
                latestHitMapPos := mapPos + unit * 0.01

                raycasterPos = vec2(latestHitMapPos.x + side * wallX + (1.0 - side) * (0.5 - 0.5 * sign(rayDir.x)), latestHitMapPos.y + (1.0-side) * wallX + side*((0.5 - 0.5 * sign(rayDir.y))))
            }
        }
    }

    clr := vec4((160.0+128.0*(dstPos.y/ScreenSize.y))/255.0, (216.0+128.0*(dstPos.y/ScreenSize.y))/255.0, (239.0+128.0*(dstPos.y/ScreenSize.y))/255.0, 1) //skyblue
    // clr := vec4(0*(dstPos.y/ScreenSize.y)/255.0, 255.0*(dstPos.y/ScreenSize.y)/255.0, 255.0*(dstPos.y/ScreenSize.y)/255.0, 1) //skyblue
    // clr := vec4(142.0/255.0, 255.0/255.0, 255.0/255.0, 1)
    // clr := vec4(0.55, 1.0, 1.0, 1)
    // clr := vec4(0)
    return vec4(clr.rgb + (spriteBlending.rgb - clr.rgb) * spriteBlending.a, 1)
}

func EncodeFloatRGBA(v float) vec4 {
    enc := vec4(1.0, 255.0, 65025.0, 16581375.0) * v
    enc = fract(enc)
    enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0)
    return enc
}

func DecodeFloatRGBA(rgba vec4) float {
    return dot(rgba, vec4(1.0, 1/255.0, 1/65025.0, 1/16581375.0))
}



