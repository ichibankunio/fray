//go:build ignore
// +build ignore

package main

// var Pos vec2
// var Dir vec2
// var Plane vec2
var PosDirPlane [3]vec2
// var WorldSize vec2
// var texSize float
// var Level [100]float
// var FloorLevel [100]float
var PosZ float
var Pitch float
var SpritesNum float
var ShooterFloatingHeight float
// var SubjectPos vec2
var TexSize float
var ScreenSize vec2
// var SpriteParam [18]float

//imageSrc3.g = 壁の高さ　imageSrc3.r = 壁テクスチャの種類(側面)
//imageSrc0 = 壁テクスチャ本体
//imageSrc1 = 床テクスチャ本体
//将来的にはimageSrc1と2は統合したい
//imageSrc2 = スプライトの種類、距離、描画始点の座標,画面上でのスプライトの縦横サイズ


func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
    // return vec4(1, 0, 0, 1)

    texOrigin, _ := imageSrcRegionOnTexture()   

    // return imageSrc3UnsafeAt(texOrigin + vec2(1, 0)/imageSrcTextureSize())

    // texSize := 64.0//64 = 2^6
    // screenSize := vec2(1920, 1080)

    //calculate ray position and direction
    cameraX := 2.0 * (1.0 - position.x / ScreenSize.x) - 1.0 //x-coordinate in camera space


    rayDir := PosDirPlane[1] + PosDirPlane[2] * cameraX
    // rayDir := vec2(Dir.x + Plane.x * cameraX, Dir.y + Plane.y * cameraX)

    mapPos := floor(PosDirPlane[0] + 0.0)

    raycasterPos := PosDirPlane[0]

    // sideDist := vec2(0)
    deltaDist := abs(1.0/rayDir)
    // deltaDist := vec2(abs(1/rayDir.x), abs(1/rayDir.y))
    perpWallDist := 0.0

    unit := sign(rayDir)
    // unit := vec2(0)
    side := -1.0

    sideDist := (unit * (mapPos - PosDirPlane[0]) + (unit * 0.5) + 0.5) * deltaDist

    mapIndex := 0.0


    // floorHeight := 0.0

    lineHeight := 0.0
    // formerRayHeight := 0.0
    // formerDrawStart := 0.0

    // rayHeight := 0.0
    // rayHeight := floor(PosZ/texSize)
    rayHeight := imageSrc3UnsafeAt(texOrigin + mapPos/imageSrcTextureSize()).g * 255 / 1

    spriteBlending := vec4(0)

    //perform DDA
    for i := 0; i < 30; i++ {
        //jump to next map square, OR in x-direction, OR in y-direction
        if sideDist.x < sideDist.y {
            sideDist.x += deltaDist.x
            mapPos.x += unit.x
            side = 0.0
        } else {
            sideDist.y += deltaDist.y
            mapPos.y += unit.y
            side = 1.0
        }

        // if mapIndex > 1 {
        // if abs(levelHeight[10*int(mapPos.y)+int(mapPos.x)] - rayHeight) > 0.001 {
        // if levelHeight[10*int(mapPos.y)+int(mapPos.x)] != rayHeight {
        // texOrigin, _ := imageSrcRegionOnTexture()
        if imageSrc3UnsafeAt(texOrigin + mapPos/imageSrcTextureSize()).g * 255 != rayHeight {//g: height map(1~255 uint8)

            // wallX := 0.0
            perpWallDist = side * (sideDist.y - deltaDist.y) + (1.0 - side) * (sideDist.x - deltaDist.x)

            // if perpWallDist < 2  {
            //     continue
            // }



          
/* 1/13　subjectとcameraの間に壁があるときに、かぶっている壁を少し透過させたい
            if perpWallDist < 2 && position.x > screenSize.x / 2 - 100 && position.x < screenSize.x / 2 + 100 {
                continue
            }
            if position.y >= drawStart && position.y <= drawEnd && perpWallDist < 2 && position.x > screenSize.x / 2 - 100 && position.x < screenSize.x / 2 + 100 {
                continue
            }

            if perpWallDist < 1 && position.x > screenSize.x / 2 - 100 && position.x < screenSize.x / 2 + 100 {
                continue
            }

            if perpWallDist < 1 && position.x > screenSize.x / 2 - 100 && position.x < screenSize.x / 2 + 100 {
                continue
            }
*/
       
            //sprite casting
            squaredEuclidean := perpWallDist * perpWallDist * (rayDir.x * rayDir.x + rayDir.y * rayDir.y) // euclidean = perpWallDist * |rayDir|

            // lenSprites := int(imageSrc2UnsafeAt(texOrigin).r)


            for i := 0; i < 2; i++ {
                sizeOnScreen := vec2(DecodeFloatRGBA(imageSrc2UnsafeAt(texOrigin+vec2(7 * i + 2, 0)/imageSrcTextureSize())), DecodeFloatRGBA(imageSrc2UnsafeAt(texOrigin+vec2(7 * i + 3, 0)/imageSrcTextureSize()))) * ScreenSize * 10

                distanceToCamera := DecodeFloatRGBA(imageSrc2UnsafeAt(texOrigin+vec2(7 * i + 4, 0)/imageSrcTextureSize())) * 5

                signOfPos := vec2(DecodeFloatRGBA(imageSrc2UnsafeAt(texOrigin+vec2(7 * i + 5, 0)/imageSrcTextureSize())), DecodeFloatRGBA(imageSrc2UnsafeAt(texOrigin+vec2(7 * i + 6, 0)/imageSrcTextureSize())))

                posOnScreen := (vec2(DecodeFloatRGBA(imageSrc2UnsafeAt(texOrigin+vec2(7 * i, 0)/imageSrcTextureSize())), DecodeFloatRGBA(imageSrc2UnsafeAt(texOrigin+vec2(7 * i + 1, 0)/imageSrcTextureSize()))) - signOfPos) * ScreenSize



                if distanceToCamera >= 0 && distanceToCamera < squaredEuclidean && position.x > posOnScreen.x && position.x < posOnScreen.x + sizeOnScreen.x && position.y > posOnScreen.y && position.y < posOnScreen.y + sizeOnScreen.y {
                    // return vec4(1, 0, 0, 1)

                    // if DecodeFloatRGBA(imageSrc2UnsafeAt(texOrigin+vec2(7 * i + 1, 0)/imageSrcTextureSize())) > 0.9999 {
                    //     return vec4(0, 1, 0, 1)
                    // }
                    // if posOnScreen.y < -screenSize.y * 0.9 {
                    //     return vec4(0, 0, 1, 1)
                    // }
                 
                    texPos := vec2((position.x - posOnScreen.x) / sizeOnScreen.x + mod(1, ScreenSize.x / TexSize), (position.y - posOnScreen.y) / sizeOnScreen.y) * TexSize
    
                    texOrigin, _ := imageSrcRegionOnTexture()
                    //s はテクスチャ上のimageSrc上の座標　単位テクセル
                    //texOrigin + s/imageSrcTextureSize()はimageSrcがあるテクスチャのどの座標（単位ピクセル）のRGBAをとるか
                    clr := imageSrc0UnsafeAt(texOrigin + texPos/imageSrcTextureSize())

                    // if sizeOnScreen.y > screenSize.y * 1.5 {
                    //     spriteBlending = vec4(clr.rgb, 0.1)
                    // }

                    if clr.a > 0 {
                        if sizeOnScreen.y > ScreenSize.y*1.5 {
                            spriteBlending = vec4(clr.rgb, ScreenSize.y*1.5 / sizeOnScreen.y)
                        }else {
                            return vec4(clr)
                        }


                        // return vec4(clr.rgb + (spriteBlending.rgb - clr.rgb) * spriteBlending.a, 1)
                    }
                }
            }

    
            

            

            // return imageSrc2UnsafeAt(texOrigin + position.xy/imageSrcTextureSize())
            


            //SPRITE CASTING HERE(deleted)----------------------------------------------------------------

            wallX := fract(side * (PosDirPlane[0].x + perpWallDist*rayDir.x) + (1.0 - side) * (PosDirPlane[0].y + perpWallDist*rayDir.y))

            lastRenderedWallTop := ScreenSize.y / perpWallDist * (rayHeight)


            // texOrigin, _ := imageSrcRegionOnTexture()
            // rayHeight = levelHeight[10*int(mapPos.y)+int(mapPos.x)]//ray's current height
            // rayHeight = currentLevel.g//ray's current height
            rayHeight = imageSrc3UnsafeAt(texOrigin + mapPos/imageSrcTextureSize()).g * 255 / 1
            

            // mapIndex = level[10*int(mapPos.y)+int(mapPos.x)]
            // mapIndex = currentLevel.r
            mapIndex = imageSrc3UnsafeAt(texOrigin + mapPos/imageSrcTextureSize()).r * 255
           

    
            lineHeight = ScreenSize.y / perpWallDist * (rayHeight)

            

            eyeHeight := PosZ / TexSize * ScreenSize.y / perpWallDist // PosZが0の時にちゃんと目線が地面に来るように32をひく　PosZが64の時にちゃんと目線が1ブロック分のところに来るように調整

            drawStart := -lineHeight + ScreenSize.y / 2.0 + eyeHeight + Pitch
            drawEnd := ScreenSize.y / 2.0 + eyeHeight + Pitch - lastRenderedWallTop

            // if inside == 1 && position.y >= drawStart {
            //     return vec4(1, 0, 0, 0.4)
            // }   
                
         
            // if position.y > formerDrawStart {
            //     // return vec4(1, 0, 0, 0.4)
            // }

            if position.y >= drawStart && position.y <= drawEnd {//wall casting

                // if rayHeight > formerRayHeight && position.y > drawEnd - screenSize.y / perpWallDist * (formerRayHeight)  {
                //     // return vec4(1, 0, 0, 1)
                // }

                // posOnTexture := vec2((wallX + mod(mapIndex-1, screenSize.x / texSize)) * texSize, (position.y - drawStart) / lineHeight * texSize)
                posOnTexture := vec2((wallX + mod(mapIndex-1, ScreenSize.x / TexSize)) * TexSize, fract((position.y - drawStart) / lineHeight * rayHeight) * TexSize)
                texOrigin, _ := imageSrcRegionOnTexture()
                //s はテクスチャ上のimageSrc上の座標　単位テクセル
                //texOrigin + s/imageSrcTextureSize()はimageSrcがあるテクスチャのどの座標（単位ピクセル）のRGBAをとるか
                clr := imageSrc0UnsafeAt(texOrigin + posOnTexture/imageSrcTextureSize())
                clr = side * vec4(clr.rgb-vec3(0.1), 1) + (1.0 - side) * vec4(clr.rgb, 1.0)

                // return side * vec4(clr-vec3(0.1), 1) + (1.0 - side) * vec4(clr, 1.0) + spriteBlending
                return vec4(clr.rgb + (spriteBlending.rgb - clr.rgb) * spriteBlending.a, 1)

            }else if position.y > drawEnd {//floor casting

//vertical scan----------------------------------------
                // if position.x > screenSize.x/2-2 && position.x < screenSize.x/2+2 {
                //     return vec4(1, 0.3, 0.7, 1)
                // }
                

                // return vec4(0, 0.4, 0, 1)
                rayHitPos := vec2(mapPos.x + side * wallX + (1.0 - side) * (0.5 - 0.5 * sign(rayDir.x)), mapPos.y + (1.0-side) * wallX + side*((0.5 - 0.5 * sign(rayDir.y))))

                distToIntersectionWithBottomOfWall := perpWallDist
                // distToIntersectionWithBottomOfWall := distance(rayHitPos, PosDirPlane[0])


                // distPlayer := 0.0
                // distToIntersectionWithFloor := (screenSize.y)/(2.0*position.y - screenSize.y)//これを下に変えるとPosZとPitchを変えた時の床の描画がうまくいく　理由不明
                // distToIntersectionWithFloor := (screenSize.y + (2.0 * (rayHeight)*screenSize.y/texSize))/ (2.0*(position.y - Pitch) - screenSize.y) //この代わりに小さなルックアップ テーブルを作成できます

                // eyeHeight := (PosZ - rayHeight*64) * screenSize.y / texSize / perpWallDist // PosZが0の時にちゃんと目線が地面に来るように32をひく　PosZが64の時にちゃんと目線が1ブロック分のところに来るように調整

                // eyeHeight := (PosZ - 30 - imageSrc3UnsafeAt(texOrigin + PosDirPlane[0]/imageSrcTextureSize()).g * 255 * 64)  // PosZが0の時にちゃんと目線が地面に来るように32をひく　PosZが64の時にちゃんと目線が1ブロック分のところに来るように調整
                // eyeHeight = 0   // PosZが0の時にちゃんと目線が地面に来るように32をひく　PosZが64の時にちゃんと目線が1ブロック分のところに来るように調整
                // if imageSrc3UnsafeAt(texOrigin + PosDirPlane[0]/imageSrcTextureSize()).g * 255 == 3 {
                //     return vec4(1, 0, 0.5, 1)
                // }



                // offsetZ := ((PosZ-imageSrc3UnsafeAt(texOrigin + raycasterPos/imageSrcTextureSize()).g*255*64)/texSize-0.5)*screenSize.y
                offsetZ := ((PosZ-imageSrc3UnsafeAt(texOrigin + raycasterPos/imageSrcTextureSize()).g*255*64)/TexSize-0.5)*ScreenSize.y
             

                // distToIntersectionWithFloor := (screenSize.y + (2.0*screenSize.y/texSize)) / (2.0*(position.y - Pitch) - screenSize.y) //この代わりに小さなルックアップ テーブルを作成できます
                distToIntersectionWithFloor := (ScreenSize.y + 2.0*offsetZ) / (2.0*(position.y - Pitch) - ScreenSize.y) //この代わりに小さなルックアップ テーブルを作成できます

                // if distToIntersectionWithFloor < 1 {
                //     return vec4(1, 1, 0, 1)
                // }

                // currentDist = (h + (2.0 * posZ)) / (2.0 * (y - pitch) - h);

                // if distToIntersectionWithFloor < 1.0 {
                //     return vec4(0, 1, 0, 1)
                // }

                // weight := (distToIntersectionWithFloor - distPlayer) / (distToIntersectionWithBottomOfWall - distPlayer)//0-1
                weight := distToIntersectionWithFloor / distToIntersectionWithBottomOfWall//0-1

                // if weight < 0.8 {
                //     return vec4(1, 0.7, 0.5, 1)

                // }

                currentFloor := vec2(weight*rayHitPos.x+(1.0-weight)*(PosDirPlane[0].x), weight*rayHitPos.y+(1.0-weight)*PosDirPlane[0].y) //平面図において線形補完


                // floorMapIndex := floorLevel[10*int(currentFloor.y)+int(currentFloor.x)] - 1.0
                // floorMapIndex := currentLevel.b - 1.0
                floorMapIndex := imageSrc3UnsafeAt(texOrigin + currentFloor/imageSrcTextureSize()).b * 255
                

                posOnTexture := vec2((fract(currentFloor.x) + mod(floorMapIndex, ScreenSize.x / TexSize)) * TexSize, (fract(currentFloor.y)) * TexSize)//テクスチャが多いときの折り返し未実装


                texOrigin, _ := imageSrcRegionOnTexture()
                //s はテクスチャ上のimageSrc上の座標　単位テクセル
                //texOrigin + s/imageSrcTextureSize()はimageSrcがあるテクスチャのどの座標（単位ピクセル）のRGBAをとるか
                clr := imageSrc1UnsafeAt(texOrigin + posOnTexture/imageSrcTextureSize())
                return vec4(clr.rgb + (spriteBlending.rgb - clr.rgb) * spriteBlending.a, 1)
                // return imageSrc1UnsafeAt(texOrigin + posOnTexture/imageSrcTextureSize()) + spriteBlending

            }else if position.y < drawStart {//ceiling casting

                // floorHeight = rayHeight
                // formerRayHeight = rayHeight
                // inside = 1


                // formerDrawStart = drawStart

                latestHitMapPos := mapPos + unit * 0.01

                raycasterPos = vec2(latestHitMapPos.x + side * wallX + (1.0 - side) * (0.5 - 0.5 * sign(rayDir.x)), latestHitMapPos.y + (1.0-side) * wallX + side*((0.5 - 0.5 * sign(rayDir.y))))

            }

//vertical scan-----------------------------------------------------
//horizontal scan--------------------------
/*
            // rayDir for leftmost ray (x = 0) and rightmost ray (x = w)
            rayDir0 := PosDirPlane[1] - PosDirPlane[2]
            rayDir1 := PosDirPlane[1] + PosDirPlane[2]

            // Current y position compared to the center of the screen (the horizon)
            p := position.y - screenSize.y / 2

            // Vertical position of the camera.
            posZ := 0.5 * screenSize.y

            // Horizontal distance from the camera to the floor for the current row.
            // 0.5 is the z position exactly in the middle between floor and ceiling.
            rowDistance := posZ / p

            // calculate the real world step vector we have to add for each x (parallel to camera plane)
            // adding step by step avoids multiplications with a weight in the inner loop
            // floorStepX := rowDistance * (rayDir1.x - rayDir0.x) / screenSize.x
            // floorStepY := rowDistance * (rayDir1.y - rayDir0.y) / screenSize.x
            floorStep := rowDistance * (rayDir1 - rayDir0) / screenSize.x

            // real world coordinates of the leftmost column. This will be updated as we step to the right.
            floorPos := PosDirPlane[0] + rowDistance * rayDir0
            // float floorX = posX + rowDistance * rayDirX0;
            // float floorY = posY + rowDistance * rayDirY0;
*/
//-----------------------------------------
        }

            //Calculate distance of perpendicular ray (oblique distance will give fisheye effect!)
        

    }

    // clr := vec4(160.0/255.0, 216.0/255.0, 239.0/255.0, 1) //skyblue
    clr := vec4(0)
    return vec4(clr.rgb + (spriteBlending.rgb - clr.rgb) * spriteBlending.a, 1)
}

func EncodeFloatRGBA(v float) vec4 {
    enc := vec4(1.0, 255.0, 65025.0, 16581375.0) * v
    enc = fract(enc)
    enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0)
    return enc
}

func DecodeFloatRGBA(rgba vec4) float {
    return dot(rgba, vec4(1.0, 1/255.0, 1/65025.0, 1/16581375.0))
}



