package mapeditor

import (
	"github.com/hajimehoshi/ebiten/v2"
)

type MapEditor struct {
	bytes   []byte
	data    [4][]uint8
	texture *ebiten.Image
	canvas  *ebiten.Image
}

func (me *MapEditor) GetCanvas() *ebiten.Image {
	return me.canvas
}

func (me *MapEditor) GetTexture() *ebiten.Image {
	return me.texture
}

func (me *MapEditor) GetData() [4][]uint8 {
	return me.data
}

func NewMapEditor(screenWidth, screenHeight int, canvasWidth int, canvasHeight int) *MapEditor {
	arr := [4][]uint8{}
	for i, _ := range arr {
		arr[i] = make([]uint8, canvasWidth*canvasHeight)
	}

	return &MapEditor{
		bytes:   make([]uint8, canvasWidth*canvasHeight*4),
		data:    arr,
		texture: ebiten.NewImage(screenWidth, screenHeight),
		canvas:  ebiten.NewImage(canvasWidth, canvasHeight),
	}
}

func (me *MapEditor) SetValue(x, y int, layer int, value uint8) {
	me.data[layer][y*me.canvas.Bounds().Dx()+x] = value
	me.bytes[4*(y*me.canvas.Bounds().Dx()+x)+layer] = value

	me.canvas.WritePixels(me.bytes)

	op := &ebiten.DrawImageOptions{}
	me.texture.DrawImage(me.canvas, op)
}

func (me *MapEditor) GetValue(x, y int, layer int) uint8 {
	return me.data[layer][y*me.canvas.Bounds().Dx()+x]
}

func (me *MapEditor) LoadMapFromImage(canvas *ebiten.Image) {
	me.canvas = canvas
	me.canvas.ReadPixels(me.bytes)
	for i := 0; i < len(me.bytes)/4; i++ {
		me.data[0][i] = me.bytes[4*i]
		me.data[1][i] = me.bytes[4*i+1]
		me.data[2][i] = me.bytes[4*i+2]
		me.data[3][i] = me.bytes[4*i+3]
	}

	op := &ebiten.DrawImageOptions{}
	me.texture.DrawImage(me.canvas, op)
}

func (me *MapEditor) WriteTexture() {
	for i := 0; i < len(me.data[0]); i++ {
		me.bytes[4*i] = me.data[0][i]
		me.bytes[4*i+1] = me.data[1][i]
		me.bytes[4*i+2] = me.data[2][i]
		me.bytes[4*i+3] = me.data[3][i]
	}

	me.canvas.WritePixels(me.bytes)
	// me.canvas.Fill(color.White)

	op := &ebiten.DrawImageOptions{}
	me.texture.DrawImage(me.canvas, op)

	// // 保存するファイル名
	// savefile, err := os.Create("./map/map.png")
	// if err != nil {
	// 	fmt.Println("保存するためのファイルが作成できませんでした。")
	// 	os.Exit(1)
	// }
	// defer savefile.Close()
	// // PNG形式で保存する
	// png.Encode(savefile, me.canvas)
}

func (me *MapEditor) SetArrayTest() {
	me.data[0] = []uint8{
		1, 1, 2, 2, 2, 2, 1, 1, 1, 1,
		1, 0, 0, 0, 0, 0, 2, 0, 0, 1,
		1, 1, 1, 2, 0, 0, 0, 0, 0, 1,
		1, 2, 1, 2, 0, 0, 0, 0, 1, 1,
		1, 1, 0, 0, 0, 0, 0, 0, 0, 2,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	}
	me.data[1] = []uint8{
		1, 1, 2, 2, 2, 2, 3, 1, 1, 1,
		1, 0, 0, 0, 0, 0, 3, 0, 0, 1,
		1, 1, 3, 2, 0, 0, 0, 0, 0, 1,
		1, 2, 1, 2, 0, 0, 0, 0, 1, 1,
		1, 1, 0, 0, 0, 0, 0, 0, 0, 2,
		4, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	}
	me.data[2] = []uint8{
		1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
		1, 0, 0, 1, 1, 1, 1, 0, 1, 1,
		1, 1, 0, 1, 1, 1, 1, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	}

}

func (me *MapEditor) SetData(wallTextureID []uint8, wallHeight []uint8, floorTextureID []uint8) {
	me.data[0] = wallTextureID
	me.data[1] = wallHeight
	me.data[2] = floorTextureID
}

func (me *MapEditor) SetSampleData() {
	me.data[0] = []uint8{ //壁テクスチャの種類
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	}

	me.data[1] = []uint8{ //壁の高さ
		5, 3, 3, 2, 2, 4, 4, 3, 4, 4, 7, 7, 8, 8, 6, 6, 7, 6, 4, 5, 3, 1, 0, 0, 0, 0, 0, 4, 3, 5, 5, 1,
		5, 3, 2, 2, 3, 3, 4, 3, 4, 7, 7, 9, 10, 8, 7, 7, 4, 6, 5, 3, 5, 3, 0, 0, 0, 6, 7, 6, 5, 5, 3, 5,
		0, 3, 2, 5, 4, 4, 4, 4, 4, 5, 6, 7, 7, 6, 7, 4, 6, 3, 4, 4, 4, 4, 3, 4, 5, 9, 7, 7, 5, 4, 4, 4,
		3, 3, 4, 6, 4, 4, 4, 4, 4, 4, 4, 5, 3, 7, 5, 4, 4, 3, 3, 4, 4, 4, 4, 4, 5, 8, 9, 8, 5, 5, 3, 3,
		4, 5, 6, 6, 6, 5, 4, 4, 4, 4, 4, 4, 3, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 7, 9, 8, 5, 5, 3, 2,
		5, 6, 7, 6, 6, 4, 5, 4, 4, 4, 4, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 6, 5, 4, 2, 1,
		0, 4, 4, 4, 5, 5, 4, 4, 4, 4, 2, 2, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 4, 2, 2,
		0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 3, 3, 3, 2,
		5, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 1, 2, 1,
		7, 5, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 2, 1, 1, 1,
		6, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 3, 2, 1, 1,
		4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 4, 3, 4, 4, 4, 4, 4, 4, 4, 1, 2, 0, 1,
		3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 2, 1, 1, 0, 0,
		2, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 5, 4, 4, 3, 1, 0, 0,
		4, 2, 4, 4, 4, 4, 4, 4, 6, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 7, 5, 5, 4, 4, 4, 2,
		5, 4, 3, 4, 4, 4, 4, 3, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 3, 4, 8, 8, 5, 5, 4, 4,
		2, 5, 4, 4, 4, 5, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 3, 3, 3, 2, 4, 4, 8, 7, 5, 6, 5,
		4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 3, 3, 2, 3, 5, 6, 4, 5, 3, 3,
		0, 4, 4, 4, 7, 8, 7, 9, 7, 8, 8, 4, 5, 3, 3, 2, 2, 2, 2, 2, 3, 3, 4, 4, 3, 3, 4, 4, 3, 4, 0, 0,
		1, 4, 5, 4, 6, 8, 9, 9, 9, 9, 8, 7, 5, 3, 3, 3, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 3, 3, 0, 0, 0,
		3, 5, 8, 8, 9, 9, 10, 10, 10, 8, 8, 8, 7, 5, 4, 3, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 1, 0, 0,
		0, 4, 7, 9, 9, 10, 10, 10, 10, 9, 10, 7, 7, 5, 4, 2, 2, 3, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 1, 1,
		0, 0, 5, 6, 8, 8, 10, 10, 10, 10, 10, 10, 8, 6, 5, 3, 2, 2, 2, 3, 4, 4, 4, 4, 2, 3, 4, 4, 3, 4, 3, 1,
		0, 3, 1, 6, 6, 6, 10, 10, 10, 10, 10, 10, 10, 7, 6, 5, 3, 3, 2, 4, 4, 4, 3, 2, 0, 0, 3, 4, 4, 4, 4, 3,
		4, 2, 2, 2, 0, 5, 9, 10, 10, 10, 10, 10, 10, 9, 8, 6, 4, 4, 4, 4, 3, 4, 3, 0, 0, 0, 2, 3, 4, 4, 4, 2,
		2, 2, 0, 0, 0, 0, 6, 8, 10, 10, 9, 10, 10, 9, 6, 7, 3, 4, 3, 3, 4, 2, 2, 0, 0, 0, 0, 3, 4, 3, 3, 4,
		0, 1, 1, 0, 0, 0, 1, 4, 8, 10, 10, 8, 10, 9, 7, 5, 5, 2, 2, 2, 3, 4, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2,
		0, 1, 1, 0, 0, 0, 0, 1, 6, 8, 7, 6, 6, 6, 7, 5, 3, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
		0, 0, 1, 0, 0, 0, 0, 0, 0, 6, 8, 6, 5, 5, 5, 3, 3, 2, 2, 2, 3, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1,
		0, 0, 0, 0, 4, 0, 0, 0, 2, 4, 5, 5, 4, 4, 3, 2, 2, 1, 3, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
		0, 0, 0, 0, 3, 1, 0, 0, 3, 5, 4, 2, 2, 4, 4, 2, 1, 2, 2, 3, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
		2, 0, 0, 0, 3, 1, 0, 0, 4, 3, 2, 2, 2, 3, 2, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0,
	}

	me.data[2] = []uint8{ //床テクスチャの種類
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	}
}
